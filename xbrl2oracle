#!/bin/python

import sys
import os
import shutil
import logging
import json
import webbrowser
import cx_Oracle
from threading import Timer
from flask import Flask, render_template, request, redirect, flash, url_for
from werkzeug.utils import secure_filename
from xbrl.cache import HttpCache
from xbrl.instance import XbrlParser, XbrlInstance

UPLOAD_FOLDER = 'uploads'
ALLOWED_EXTENSIONS = {'html', 'xml', 'xbrl', 'xsd', 'xsl'}

print('Reading config file')
configfile = open('config.json')
config = json.load(configfile)

logging.basicConfig(level=logging.INFO)
cache: HttpCache = HttpCache('./cache')
# Replace the dummy header with your information!! 
# services like SEC EDGAR require you to disclose information about your bot! (https://www.sec.gov/privacy.htm#security)
cache.set_headers({'From': 'your.name@company.com', 'User-Agent': 'Tool/Version (Website)'})
xbrlParser = XbrlParser(cache)

def parseFile(filename):
    print('Parsing file : ' + filename + ' ...');
    inst: XbrlInstance = xbrlParser.parse_instance_locally(filename)
    print('Parsed successfully : ' + str(inst))
    return inst

def saveToDB(inst, filename):
    # Connect to db
    print('Connecting to Oracle Database at : ' + config['db_path'])
    connection = cx_Oracle.connect(
        user=config['db_user'],
        password=config['db_pass'],
        dsn=config['db_path'])
    print("Successfully connected to Oracle Database")
    # The db cursor
    cursor = connection.cursor()
    # Drop tables if config has drop_tables flag
    if config['drop_tables']:
        cursor.execute("""
          begin
            execute immediate 'drop table xbrlfiles';
            exception when others then if sqlcode <> -942 then raise; end if;
          end;""")
        cursor.execute("""
          begin
            execute immediate 'drop table xbrlfacts';
            exception when others then if sqlcode <> -942 then raise; end if;
          end;""")
    # Create tables if not existent
    cursor.execute("""
      begin
      execute immediate '
        create table xbrlfiles (
          id number generated always as identity,
          filename varchar2(4000),
          creation_ts timestamp with time zone default current_timestamp,
          primary key (id))';
      exception when others then
        if SQLCODE = -955 then null; else raise; end if;
      end;
    """)
    cursor.execute("""
      begin
      execute immediate '
        create table xbrlfacts (
          id number generated always as identity,
          fileid number,
          name varchar2(4000),
          value varchar2(4000),
          creation_ts timestamp with time zone default current_timestamp,
          primary key (id))';
      exception when others then
        if SQLCODE = -955 then null; else raise; end if;
      end;
    """)
    # insert file to db
    cursor.execute("insert into xbrlfiles (filename) values(:1)", [filename])
    fileid = cursor.lastrowid;
    # init facts for db insertion
    facts = []
    # extract facts and save to list
    for i in range(len(inst.facts)):
        fact = inst.facts[i]
        facts[i] = [fileid, fact.concept.name, fact.value]
    # insert facts to db
    cursor.executemany("insert into xbrlfacts (fileid, name, value) values(:1, :2, :3)", facts)
    connection.commit()

def read_db():
    # Connect to db
    print('Connecting to Oracle Database at : ' + config['db_path'])
    connection = cx_Oracle.connect(
        user=config['db_user'],
        password=config['db_pass'],
        dsn=config['db_path'])
    print("Successfully connected to Oracle Database")
    # The db cursor
    cursor = connection.cursor()

    facts = cursor.execute("SELECT f.* from l.* xbrlfile FROM xbrlfacts f INNER JOIN xbrlfiles l ON f.fileid = l.id ORDER BY f.id").fetchall()
    return json.dumps(facts)


def allowed_file(filename):
    return '.' in filename and \
            filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def run_server():
    app = Flask(__name__)
    app.config['SECRET_KEY'] = '-PANDA_CORNER:'
    app.config['SESSION_TYPE'] = 'filesystem'
    app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
    # web ui route
    @app.route('/')
    def index():
        return render_template('./index.html')
    # main endpoint
    @app.route('/xbrl2oracle', methods = ['POST'])
    def xbrl2oracle():
        files = request.files.getlist("file")

        if ('entry_file' not in request.form or request.form['entry_file'] == ''):
            flash('Please specify entry file path')
            return redirect('/')

        # check if the post request has the proper files part
        if len(files) < 1:
            flash('No files to upload')
            return redirect('/')

        if (request.form['db_path'] != ''):
            config['db_path'] = request.form['db_path']
        if (request.form['db_user'] != ''):
            config['db_user'] = request.form['db_user']
        if (request.form['db_pass'] != ''):
            config['db_pass'] = request.form['db_pass']

        print('current working directory : '+ os.getcwd())

        for i in range(len(files)):
            file = files[i]
            # If the user does not select a file, the browser submits an
            # empty file without a filename.
            if file.filename == '':
                flash('No selected file')
                return redirect('/')
            if file and allowed_file(file.filename):
                print('uploading   :  ' + file.filename)
                path = os.path.basename(os.path.dirname(file.filename))
                print('file path   :  ' + path)
                local_path = os.path.join(os.getcwd(), app.config['UPLOAD_FOLDER'], path)
                print('local path  :  ' + local_path)
                if i == 0 and os.path.exists(local_path):
                    print('removing directory:' + local_path)
                    shutil.rmtree(local_path)
                if not os.path.exists(local_path):
                    print('creating directory: ' + local_path)
                    os.mkdir(local_path)
                filename = secure_filename(os.path.basename(file.filename))
                print('filename    :  ' + filename)
                local_filename = os.path.join(local_path, filename)
                print('saving file :  ' + local_filename)
                file.save(local_filename)
                print('file saved');

        # now run script on the selected entry file
        entry = os.path.join(os.getcwd(), app.config['UPLOAD_FOLDER'], request.form.get('entry_file'))
        inst = parseFile(entry)
        saveToDB(inst, entry)
        return 'Inserted'

    # list facts endpoint
    @app.route('/facts', methods= ['GET'])
    def facts():
        return read_db()

    # run server
    if __name__ == '__main__':
        app.run(debug=False, host='0.0.0.0')

if len(sys.argv) < 2:
    print('[Server mode]\n')
    Timer(1, lambda: webbrowser.open('http://localhost:5000/') ).start();
    run_server()
elif sys.argv[1] == '-h':
    print('xbrl2oracle')
else:
    print('[File mode]\n')
    inst = parseFile(sys.argv[1])
    saveToDB(inst, sys.argv[1])


# Close config file upon exiting
configfile.close()
